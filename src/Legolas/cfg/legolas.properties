### Mode: production or experimental?
mode.experimental = false

### DB Connection
db.driver = com.mysql.jdbc.Driver
db.url = jdbc:mysql://172.17.8.12/gim
db.user = gim_sist
db.password = aquila2009

### Consider only samples more recent than ... minutes ago
max.input.age.minutes = 1440

### Repeat the process every ... minutes
period.minutes = 10

### Embedded web server for monitoring and interactive control
web.port = 16182
web.password = ciao

### VisualTrack
vt.logger.enabled = false
vt.logger.url = http://89.97.181.43/SiteTrackGIM/VTLoggerMetric.jsp
vt.logger.threads = 5
vt.logger.timeout.secs = 5
metrics.period.secs = 300

### Charting
chart.speed.over.space.enabled = true
chart.speed.over.space.dir = /var/www/charts/speed_over_space
chart.speed.over.space.series = #440000, #880000, #CC0000
chart.speed.over.space.width = 600
chart.speed.over.space.height = 150
chart.speed.over.space.margin.left = 50
chart.speed.over.space.margin.right = 15
chart.speed.over.space.margin.top = 15
chart.speed.over.space.margin.bottom = 15

### Logging
log.file = log/Legolas.log

log4j.rootLogger = DEBUG, CONSOLE, FILE

log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern = %d %-5p [%c] [%t] %m%n

log4j.appender.FILE = org.apache.log4j.RollingFileAppender
log4j.appender.FILE.File = log/Legolas.log
log4j.appender.FILE.layout = org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern = %d %-5p [%c] [%t] %m%n
log4j.appender.FILE.MaxFileSize = 10000KB
log4j.appender.FILE.MaxBackupIndex = 5

### Query
sql.insert.live.stats = INSERT \
                        INTO traffic_stats \
                        (idno, dir, samples, vehicles, avg_speed, stddev_speed, density, flow, timestamp) \
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)

sql.delete.live.stats = DELETE FROM traffic_stats WHERE timestamp < ?

sql.delete.historical.stats = DELETE FROM traffic_stats_history WHERE timestamp = ?

sql.insert.historical.stats = INSERT INTO traffic_stats_history \
                              (idno, dir, samples, vehicles, avg_speed, stddev_speed, density, flow, timestamp) \
                              VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)

sql.get.sources = SELECT id_source, description FROM sources ORDER BY id_source

sql.insert.experimental.stats = INSERT \
                                INTO traffic_stats_experiments \
                                (id_experiment, idno, dir, samples, vehicles, avg_speed, stddev_speed, density, flow, timestamp) \
                                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

sql.delete.experimental.stats = DELETE \
                                FROM traffic_stats_experiments \
                                WHERE id_experiment = ?

sql.get.experiments = SELECT id_experiment, description, sources, model, timestamp FROM experiments

sql.get.experiment = SELECT id_experiment, description, sources, model, timestamp \
                     FROM experiments WHERE id_experiment = ?

sql.delete.experiment = DELETE FROM experiments WHERE id_experiment = ?

sql.insert.experiment = INSERT INTO experiments (description, sources, model, timestamp) VALUES (?, ?, ?, ?)

sql.get.executed.experiments = SELECT \
                               s.id_experiment id_experiment, \
                               e.description description, \
                               e.sources sources, \
                               e.model model, \
                               e.timestamp timestamp \
                               FROM traffic_stats_experiments s \
                               INNER JOIN experiments e ON s.id_experiment = e.id_experiment \
                               GROUP BY s.id_experiment

sql.get.experiment.stats = SELECT \
                           id_experiment, \
                           idno, \
                           dir, \
                           samples, \
                           vehicles, \
                           avg_speed, \
                           stddev_speed, \
                           density, \
                           flow, \
                           timestamp \
                           FROM traffic_stats_experiments \
                           WHERE id_experiment = ?

sql.get.roadgraph = SELECT \
                    strt.idno AS id, \
                    strt.name AS name, \
                    strt.dirx AS direction, \
                    COALESCE(link.nlan, link.nlan_nr, -1) lanes, \
                    COALESCE(strt.sped, strt.sped_nr, -1) speed, \
                    AsText(strt.shap) shape \
                    FROM strt \
                    LEFT JOIN lkst ON strt.idno = lkst.strt \
                    LEFT JOIN link ON lkst.link = link.idno

sql.get.fcd = SELECT \
              raw.id_vehicle id_vehicle, \
              raw.speed speed, \
              raw.latitude latitude, \
              raw.longitude longitude, \
              raw.dir vehicle_heading, \
              raw.timestamp timestamp, \
              geo.idno edge \
              FROM position_fcd raw \
              INNER JOIN position_fcd_geo geo ON raw.id_pos = geo.id_pos \
              WHERE raw.timestamp >= ? \
              AND raw.timestamp <= ?

sql.get.fcd.sources.filter = SELECT \
                             raw.id_vehicle id_vehicle, \
                             raw.speed speed, \
                             raw.latitude latitude, \
                             raw.longitude longitude, \
                             raw.dir vehicle_heading, \
                             raw.timestamp timestamp, \
                             geo.idno edge \
                             FROM position_fcd raw \
                             INNER JOIN position_fcd_geo geo ON raw.id_pos = geo.id_pos \
                             WHERE raw.timestamp >= ? \
                             AND raw.timestamp <= ? \
                             AND raw.source IN (%SOURCES%)

sql.get.streets = SELECT \
                  MIN(link_ord.id) AS min_id, \
                  MAX(link_ord.id) AS max_id, \
                  dir, \
                  link_ord.id_street AS id_street, \
                  t_street.name AS name, \
                  IF(dir = 0, dir0, dir1) AS dir_name \
                  FROM link_ord \
                  INNER JOIN t_street ON link_ord.id_street = t_street.id \
                  GROUP BY id_street, dir

sql.get.streets.details = SELECT \
                          id, \
                          CAST(AES_DECRYPT(UNHEX(idno), 'gimpassword') AS SIGNED) AS idno, \
                          CAST(AES_DECRYPT(UNHEX(dirx), 'gimpassword') AS SIGNED) AS dirx, \
                          id_street, \
                          dir \
                          FROM link_ord

hdd.serial = 0x000ca651