/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class shapeObj : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;
  protected object swigParentRef;
  
  protected static object ThisOwn_true() { return null; }
  protected object ThisOwn_false() { return this; }

  internal shapeObj(IntPtr cPtr, bool cMemoryOwn, object parent) {
    swigCMemOwn = cMemoryOwn;
    swigParentRef = parent;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(shapeObj obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  internal static HandleRef getCPtrAndDisown(shapeObj obj, object parent) {
    if (obj != null)
    {
      obj.swigCMemOwn = false;
      obj.swigParentRef = parent;
      return obj.swigCPtr;
    }
    else
    {
      return new HandleRef(null, IntPtr.Zero);
    }
  }
  internal static HandleRef getCPtrAndSetReference(shapeObj obj, object parent) {
    if (obj != null)
    {
      obj.swigParentRef = parent;
      return obj.swigCPtr;
    }
    else
    {
      return new HandleRef(null, IntPtr.Zero);
    }
  }

  ~shapeObj() {
    Dispose();
  }

  public virtual void Dispose() {
  lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        mapscriptPINVOKE.delete_shapeObj(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      swigParentRef = null;
      GC.SuppressFinalize(this);
    }
  }

  public override bool Equals(object obj) {
    if (obj == null)
        return false;
    if (this.GetType() != obj.GetType())
        return false;
    return swigCPtr.Handle.Equals(shapeObj.getCPtr((shapeObj)obj).Handle);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public int numlines {
    get {
      int ret = mapscriptPINVOKE.shapeObj_numlines_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int numvalues {
    get {
      int ret = mapscriptPINVOKE.shapeObj_numvalues_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public rectObj bounds {
    set {
      mapscriptPINVOKE.shapeObj_bounds_set(swigCPtr, rectObj.getCPtr(value));
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = mapscriptPINVOKE.shapeObj_bounds_get(swigCPtr);
      rectObj ret = (cPtr == IntPtr.Zero) ? null : new rectObj(cPtr, false, ThisOwn_false());
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int type {
    set {
      mapscriptPINVOKE.shapeObj_type_set(swigCPtr, value);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = mapscriptPINVOKE.shapeObj_type_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int index {
    set {
      mapscriptPINVOKE.shapeObj_index_set(swigCPtr, value);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = mapscriptPINVOKE.shapeObj_index_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int tileindex {
    set {
      mapscriptPINVOKE.shapeObj_tileindex_set(swigCPtr, value);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = mapscriptPINVOKE.shapeObj_tileindex_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int classindex {
    set {
      mapscriptPINVOKE.shapeObj_classindex_set(swigCPtr, value);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = mapscriptPINVOKE.shapeObj_classindex_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string text {
    set {
      mapscriptPINVOKE.shapeObj_text_set(swigCPtr, value);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = mapscriptPINVOKE.shapeObj_text_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int scratch {
    set {
      mapscriptPINVOKE.shapeObj_scratch_set(swigCPtr, value);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = mapscriptPINVOKE.shapeObj_scratch_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int resultindex {
    set {
      mapscriptPINVOKE.shapeObj_resultindex_set(swigCPtr, value);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = mapscriptPINVOKE.shapeObj_resultindex_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public shapeObj(int type) : this(mapscriptPINVOKE.new_shapeObj(type), true, null) {
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
  }

  public static shapeObj fromWKT(string wkt) {
    IntPtr cPtr = mapscriptPINVOKE.shapeObj_fromWKT(wkt);
    shapeObj ret = (cPtr == IntPtr.Zero) ? null : new shapeObj(cPtr, true, ThisOwn_true());
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int project(projectionObj projin, projectionObj projout) {
    int ret = mapscriptPINVOKE.shapeObj_project(swigCPtr, projectionObj.getCPtr(projin), projectionObj.getCPtr(projout));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public lineObj get(int i) {
    IntPtr cPtr = mapscriptPINVOKE.shapeObj_get(swigCPtr, i);
    lineObj ret = (cPtr == IntPtr.Zero) ? null : new lineObj(cPtr, false, ThisOwn_false());
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int add(lineObj line) {
    int ret = mapscriptPINVOKE.shapeObj_add(swigCPtr, lineObj.getCPtr(line));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int draw(mapObj map, layerObj layer, imageObj image) {
    int ret = mapscriptPINVOKE.shapeObj_draw(swigCPtr, mapObj.getCPtr(map), layerObj.getCPtr(layer), imageObj.getCPtr(image));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBounds() {
    mapscriptPINVOKE.shapeObj_setBounds(swigCPtr);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
  }

  public shapeObj clone() {
    IntPtr cPtr = mapscriptPINVOKE.shapeObj_clone(swigCPtr);
    shapeObj ret = (cPtr == IntPtr.Zero) ? null : new shapeObj(cPtr, true, ThisOwn_true());
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int copy(shapeObj dest) {
    int ret = mapscriptPINVOKE.shapeObj_copy(swigCPtr, shapeObj.getCPtr(dest));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string toWKT() {
    string ret = mapscriptPINVOKE.shapeObj_toWKT(swigCPtr);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public shapeObj buffer(double width) {
    IntPtr cPtr = mapscriptPINVOKE.shapeObj_buffer(swigCPtr, width);
    shapeObj ret = (cPtr == IntPtr.Zero) ? null : new shapeObj(cPtr, true, ThisOwn_true());
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public shapeObj simplify(double tolerance) {
    IntPtr cPtr = mapscriptPINVOKE.shapeObj_simplify(swigCPtr, tolerance);
    shapeObj ret = (cPtr == IntPtr.Zero) ? null : new shapeObj(cPtr, true, ThisOwn_true());
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public shapeObj topologyPreservingSimplify(double tolerance) {
    IntPtr cPtr = mapscriptPINVOKE.shapeObj_topologyPreservingSimplify(swigCPtr, tolerance);
    shapeObj ret = (cPtr == IntPtr.Zero) ? null : new shapeObj(cPtr, true, ThisOwn_true());
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public shapeObj convexHull() {
    IntPtr cPtr = mapscriptPINVOKE.shapeObj_convexHull(swigCPtr);
    shapeObj ret = (cPtr == IntPtr.Zero) ? null : new shapeObj(cPtr, true, ThisOwn_true());
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public shapeObj boundary() {
    IntPtr cPtr = mapscriptPINVOKE.shapeObj_boundary(swigCPtr);
    shapeObj ret = (cPtr == IntPtr.Zero) ? null : new shapeObj(cPtr, true, ThisOwn_true());
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public pointObj getCentroid() {
    IntPtr cPtr = mapscriptPINVOKE.shapeObj_getCentroid(swigCPtr);
    pointObj ret = (cPtr == IntPtr.Zero) ? null : new pointObj(cPtr, true, ThisOwn_true());
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public shapeObj Union(shapeObj shape) {
    IntPtr cPtr = mapscriptPINVOKE.shapeObj_Union(swigCPtr, shapeObj.getCPtr(shape));
    shapeObj ret = (cPtr == IntPtr.Zero) ? null : new shapeObj(cPtr, true, ThisOwn_true());
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public shapeObj intersection(shapeObj shape) {
    IntPtr cPtr = mapscriptPINVOKE.shapeObj_intersection(swigCPtr, shapeObj.getCPtr(shape));
    shapeObj ret = (cPtr == IntPtr.Zero) ? null : new shapeObj(cPtr, true, ThisOwn_true());
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public shapeObj difference(shapeObj shape) {
    IntPtr cPtr = mapscriptPINVOKE.shapeObj_difference(swigCPtr, shapeObj.getCPtr(shape));
    shapeObj ret = (cPtr == IntPtr.Zero) ? null : new shapeObj(cPtr, true, ThisOwn_true());
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public shapeObj symDifference(shapeObj shape) {
    IntPtr cPtr = mapscriptPINVOKE.shapeObj_symDifference(swigCPtr, shapeObj.getCPtr(shape));
    shapeObj ret = (cPtr == IntPtr.Zero) ? null : new shapeObj(cPtr, true, ThisOwn_true());
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int contains(shapeObj shape) {
    int ret = mapscriptPINVOKE.shapeObj_contains__SWIG_0(swigCPtr, shapeObj.getCPtr(shape));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int overlaps(shapeObj shape) {
    int ret = mapscriptPINVOKE.shapeObj_overlaps(swigCPtr, shapeObj.getCPtr(shape));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int within(shapeObj shape) {
    int ret = mapscriptPINVOKE.shapeObj_within(swigCPtr, shapeObj.getCPtr(shape));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int crosses(shapeObj shape) {
    int ret = mapscriptPINVOKE.shapeObj_crosses(swigCPtr, shapeObj.getCPtr(shape));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int intersects(shapeObj shape) {
    int ret = mapscriptPINVOKE.shapeObj_intersects(swigCPtr, shapeObj.getCPtr(shape));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int touches(shapeObj shape) {
    int ret = mapscriptPINVOKE.shapeObj_touches(swigCPtr, shapeObj.getCPtr(shape));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int equals(shapeObj shape) {
    int ret = mapscriptPINVOKE.shapeObj_equals(swigCPtr, shapeObj.getCPtr(shape));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int disjoint(shapeObj shape) {
    int ret = mapscriptPINVOKE.shapeObj_disjoint(swigCPtr, shapeObj.getCPtr(shape));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getArea() {
    double ret = mapscriptPINVOKE.shapeObj_getArea(swigCPtr);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getLength() {
    double ret = mapscriptPINVOKE.shapeObj_getLength(swigCPtr);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getValue(int i) {
    string ret = mapscriptPINVOKE.shapeObj_getValue(swigCPtr, i);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int contains(pointObj point) {
    int ret = mapscriptPINVOKE.shapeObj_contains__SWIG_1(swigCPtr, pointObj.getCPtr(point));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double distanceToPoint(pointObj point) {
    double ret = mapscriptPINVOKE.shapeObj_distanceToPoint(swigCPtr, pointObj.getCPtr(point));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double distanceToShape(shapeObj shape) {
    double ret = mapscriptPINVOKE.shapeObj_distanceToShape(swigCPtr, shapeObj.getCPtr(shape));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public pointObj getLabelPoint() {
    IntPtr cPtr = mapscriptPINVOKE.shapeObj_getLabelPoint(swigCPtr);
    pointObj ret = (cPtr == IntPtr.Zero) ? null : new pointObj(cPtr, true, ThisOwn_true());
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int setValue(int i, string value) {
    int ret = mapscriptPINVOKE.shapeObj_setValue(swigCPtr, i, value);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void initValues(int numvalues) {
    mapscriptPINVOKE.shapeObj_initValues(swigCPtr, numvalues);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
  }

}
